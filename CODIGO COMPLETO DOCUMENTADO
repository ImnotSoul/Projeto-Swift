// CARLOS ROSEMBERG E JULIA TATIM

import Foundation

// protocolo de notificacao
 protocol Notificavel {
     var mensagem: String { get }
     var prioridade: Prioridade { get }
     func enviarNotificacao()
 }

 extension Notificavel {
     func enviarNotificacao() {
         print("Enviando notificação: [\(prioridade.rawValue)] \(mensagem)")
     }
 }
// definir prioridade das mensagens
 enum Prioridade: String {
     case baixa, media, alta
 }
 // definir o tipo das mensagens
 enum TipoMensagem: String {
     case promocao, lembrete, alerta
 }

 struct Mensagem {
     var tipo: TipoMensagem
     var conteudo: String
 }

 struct Email: Notificavel {
     var mensagem: String
     var enderecoEmail: String
     var prioridade: Prioridade

     func enviarNotificacao() {
         print("Enviando email para \(enderecoEmail) [\(prioridade.rawValue)]: \(mensagem)")
     }
 }

 struct SMS: Notificavel {
     var mensagem: String
     var numeroTelefone: String
     var prioridade: Prioridade

     func enviarNotificacao() {
         print("Enviando SMS para \(numeroTelefone) [\(prioridade.rawValue)]: \(mensagem)")
     }
 }

 struct PushNotification: Notificavel {
     var mensagem: String
     var tokenDispositivo: String
     var prioridade: Prioridade

     func enviarNotificacao() {
         print("Enviando Push Notification para \(tokenDispositivo) [\(prioridade.rawValue)]: \(mensagem)")
     }
 }
  // funcao para garantir que o usuario vai digitar uma das opcoes validas
 func obterEntradaValida<T: RawRepresentable>(_ mensagem: String, opcoesValidas: [T]) -> T where T.RawValue == String {
     while true {
         print(mensagem)
         if let entrada = readLine(), let valor = T(rawValue: entrada.lowercased()) {
             return valor
         }
         print("Opção inválida! Tente novamente.")
     }
 }

 func filtrarCanaisPorTipo<T: Notificavel>(_ canais: [Notificavel], tipo: T.Type) -> [T] {
     return canais.compactMap { $0 as? T }
 }
// criar a mensagem, design muito simples e intuitivo, onde a pessoa tem apenas as opções necessarias para enviar a sua mensagem, além de um sistema onde elas podem enviar a mesma mensagem para varios canais e contatos diferentes sem ter que repetir a mensagem novamente, encerrando esse ciclo e enviando todas as mensagens juntas ao escolher a opção fim
 let tipoMensagem = obterEntradaValida("Escolha o tipo de mensagem (promocao, lembrete, alerta):", opcoesValidas: [TipoMensagem.promocao, .lembrete, .alerta])
 print("Digite o conteúdo da mensagem:")
 let conteudoMensagem = readLine() ?? ""
 let mensagem = Mensagem(tipo: tipoMensagem, conteudo: conteudoMensagem)
// canal de notificação
 var canais: [Notificavel] = []
 print("Deseja enviar por Email, SMS ou PushNotification? (Digite 'fim' para concluir)")
 while true {
     print("Escolha um canal (email, sms, pushnotification) ou 'fim' para sair:(para concluir a fase de envio de notificações")
     let tipoCanal = readLine()?.lowercased() ?? ""
     if tipoCanal == "fim" { break }

     if !["email", "sms", "pushnotification"].contains(tipoCanal) {
         print("Opção inválida! Tente novamente.")
         continue
     }
// escolher o nivel de prioridade da mensagem
     let prioridade = obterEntradaValida("Escolha a prioridade (baixa, media, alta):", opcoesValidas: [Prioridade.baixa, .media, .alta])
// swith case para escolher o tipo de canal 
     switch tipoCanal {
     case "email":
         print("Digite o endereço de email:")
         let email = readLine() ?? ""
         canais.append(Email(mensagem: mensagem.conteudo, enderecoEmail: email, prioridade: prioridade))
     case "sms":
         print("Digite o número de telefone:")
         let telefone = readLine() ?? ""
         canais.append(SMS(mensagem: mensagem.conteudo, numeroTelefone: telefone, prioridade: prioridade))
     case "pushnotification":
         print("Digite o token do dispositivo:")
         let token = readLine() ?? ""
         canais.append(PushNotification(mensagem: mensagem.conteudo, tokenDispositivo: token, prioridade: prioridade))
     default:
         break
     }
 }

//enviar uma mensagem generica de confirmação
 print("\nEnviando notificações:")
 for canal in canais {
     canal.enviarNotificacao()
 }

 print("Notificações enviadas com sucesso!")


// Exibir quantas notificacoes foram enviadas por cada canal
let emails = filtrarCanaisPorTipo(canais, tipo: Email.self)
let smsCanais = filtrarCanaisPorTipo(canais, tipo: SMS.self)
let pushCanais = filtrarCanaisPorTipo(canais, tipo: PushNotification.self)

print("\nResumo das notificações enviadas:")
print("Foram enviados \(emails.count) emails.")
print("Foram enviados \(smsCanais.count) SMS.")
print("Foram enviados \(pushCanais.count) Push Notifications.")
